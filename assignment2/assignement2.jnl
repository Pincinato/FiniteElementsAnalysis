# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(-75.0, 25.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(-66.25, 65.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(-75.0, -20.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(-75.0, 25.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(-1.25, -17.5))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], ))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-70.0, 20.0), 
    point2=(-70.0, -25.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-70.0, -25.0), 
    point2=(-15.0, -25.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-15.0, -25.0), 
    point2=(-15.0, -15.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-15.0, -15.0), 
    point2=(-60.0, -15.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-60.0, -15.0), 
    point2=(-60.0, 20.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-60.0, 20.0), 
    point2=(-70.0, 20.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
# Save by fe1 on 2018_04_16-08.42.21; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
# Save by fe1 on 2018_04_16-08.44.11; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].sketches['__profile__'].VerticalDimension(textPoint=(
    100.0, 0.0), value=100.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -70.0264739990234, -35.6797142028809), value=100.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7])
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].dimensions[1], ))
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    30.2322731018066, 0.443557739257812), value=100.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[9], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[8])
mdb.models['Model-1'].sketches['__profile__'].EqualLengthConstraint(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].HorizontalDimension(textPoint=(
    -61.0018539428711, 84.3054962158203), value=20.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[10])
# Save by fe1 on 2018_04_16-08.48.14; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='assignment2', 
    type=DEFORMABLE_BODY)
mdb.models['Model-1'].parts['assignment2'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='steel')
mdb.models['Model-1'].materials['steel'].Elastic(table=((500.0, 0.3), ))
del mdb.models['Model-1'].materials['steel'].elastic
mdb.models['Model-1'].materials['steel'].Plastic(table=((500.0, 0.0), ))
# Save by fe1 on 2018_04_16-08.53.34; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_16-08.53.35; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].HomogeneousSolidSection(material='steel', name=
    'Section_assignment2', thickness=2.0)
# Save by fe1 on 2018_04_16-08.54.41; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['assignment2'].Set(faces=
    mdb.models['Model-1'].parts['assignment2'].faces.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['assignment2'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['assignment2'].sets['Set-1'], sectionName=
    'Section_assignment2', thicknessAssignment=FROM_SECTION)
# Save by fe1 on 2018_04_16-08.57.32; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_16-08.58.22; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='assignment2-1', 
    part=mdb.models['Model-1'].parts['assignment2'])
# Save by fe1 on 2018_04_16-09.00.11; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].StaticStep(name='Step-1', previous='Initial')
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'S', 'U', 'RF', 'NFORC'))
# Save by fe1 on 2018_04_16-09.04.56; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_16-09.05.38; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_16-09.06.27; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['assignment2-1'].edges.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].EncastreBC(createStepName='Step-1', localCsys=None, name=
    'BC-1', region=mdb.models['Model-1'].rootAssembly.sets['Set-1'])
# Save by fe1 on 2018_04_16-09.09.40; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Set(name='Set-2', vertices=
    mdb.models['Model-1'].rootAssembly.instances['assignment2-1'].vertices.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].ConcentratedForce(cf2=-250.0, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-2'])
mdb.models['Model-1'].rootAssembly.Set(name='Set-3', vertices=
    mdb.models['Model-1'].rootAssembly.instances['assignment2-1'].vertices.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-1'].ConcentratedForce(cf2=-250.0, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-2', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-3'])
# Save by fe1 on 2018_04_16-09.11.58; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_16-09.12.00; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_16-09.12.05; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].materials['steel'].Elastic(table=((210000.0, 0.3), ))
mdb.models['Model-1'].parts['assignment2'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-1'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#9 ]', ), ), number=5)
mdb.models['Model-1'].parts['assignment2'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-1'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#30 ]', ), ), number=25)
mdb.models['Model-1'].parts['assignment2'].generateMesh()
mdb.models['Model-1'].parts['assignment2'].setElementType(elemTypes=(ElemType(
    elemCode=CPS8R, elemLibrary=STANDARD), ElemType(elemCode=CPS6M, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['assignment2'].faces.getSequenceFromMask((
    '[#1 ]', ), ), ))
# Save by fe1 on 2018_04_16-09.22.52; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['assignment2'].deleteMesh(regions=
    mdb.models['Model-1'].parts['assignment2'].faces.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=7.81, name='__profile__', 
    sheetSize=312.4, transform=
    mdb.models['Model-1'].parts['assignment2'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['assignment2'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(-30.0, 5.0, 0.0)))
mdb.models['Model-1'].parts['assignment2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
# Save by fe1 on 2018_04_16-09.26.38; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-20.0, -10.0), 
    point2=(-20.0, -30.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-20.0, -30.0), 
    point2=(-20.0, -10.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[8], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-20.0, -10.0), 
    point2=(-40.0, -10.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[6], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-40.0, -10.0), 
    point2=(-20.0, -10.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[10], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-20.0, -10.0), 
    point2=(-40.0, -30.0))
mdb.models['Model-1'].parts['assignment2'].PartitionFaceBySketch(faces=
    mdb.models['Model-1'].parts['assignment2'].faces.getSequenceFromMask((
    '[#1 ]', ), ), sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['assignment2'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-1'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#41 ]', ), ), number=5)
mdb.models['Model-1'].parts['assignment2'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-1'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#108 ]', ), ), number=25)
mdb.models['Model-1'].parts['assignment2'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-1'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#90 ]', ), ), number=5)
mdb.models['Model-1'].parts['assignment2'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-1'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#20 ]', ), ), number=5)
# Save by fe1 on 2018_04_16-09.30.16; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['assignment2'].generateMesh()
mdb.models['Model-1'].parts['assignment2'].deleteMesh(regions=
    mdb.models['Model-1'].parts['assignment2'].faces.getSequenceFromMask((
    '[#f ]', ), ))
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=7.81, name='__profile__', 
    sheetSize=312.4, transform=
    mdb.models['Model-1'].parts['assignment2'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['assignment2'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(-60.0, 35.0, 0.0)))
mdb.models['Model-1'].parts['assignment2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], ))
# Save by fe1 on 2018_04_16-09.32.50; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_16-09.33.01; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(10.0, -40.0), 
    point2=(-10.0, -60.0))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[16], ))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=7.81, name='__profile__', 
    sheetSize=312.4, transform=
    mdb.models['Model-1'].parts['assignment2'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['assignment2'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(-60.0, 35.0, 0.0)))
mdb.models['Model-1'].parts['assignment2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[9]))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], ))
del mdb.models['Model-1'].sketches['__profile__']
# Save by fe1 on 2018_04_16-09.40.52; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_16-09.41.17; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['assignment2'].features['Partition face-1'].sketch)
mdb.models['Model-1'].parts['assignment2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['assignment2'].features['Partition face-1'])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[12], ))
mdb.models['Model-1'].parts['assignment2'].features['Partition face-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['assignment2'].regenerate()
mdb.models['Model-1'].parts['assignment2'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-1'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#80 ]', ), ), number=25)
mdb.models['Model-1'].parts['assignment2'].seedEdgeByNumber(constraint=FINER, 
    edges=mdb.models['Model-1'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#60 ]', ), ), number=5)
# Save by fe1 on 2018_04_16-09.43.57; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_16-09.43.58; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_16-09.43.58; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['assignment2'].generateMesh()
# Save by fe1 on 2018_04_16-09.44.04; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['assignment2'].setElementType(elemTypes=(ElemType(
    elemCode=CPS8R, elemLibrary=STANDARD), ElemType(elemCode=CPS6M, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['assignment2'].faces.getSequenceFromMask((
    '[#7 ]', ), ), ))
# Save by fe1 on 2018_04_16-09.45.08; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Global_Model', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Global_Model'].submit(consistencyChecking=OFF)
mdb.jobs['Global_Model']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'localhost.localdomain', 'handle': 0, 
    'jobName': 'Global_Model'})
mdb.jobs['Global_Model']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Global_Model'})
mdb.jobs['Global_Model']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/home/fe1/Desktop/FiniteElementsAnalysis/assignment2/Global_Model.odb', 
    'jobName': 'Global_Model'})
mdb.jobs['Global_Model']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Global_Model'})
mdb.jobs['Global_Model']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'localhost.localdomain', 'handle': 0, 
    'jobName': 'Global_Model'})
mdb.jobs['Global_Model']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Global_Model'})
mdb.jobs['Global_Model']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Global_Model'})
mdb.jobs['Global_Model']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Global_Model', 'memory': 25.0})
mdb.jobs['Global_Model']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Global_Model'})
mdb.jobs['Global_Model']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Global_Model', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Global_Model']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Global_Model'})
mdb.jobs['Global_Model']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Global_Model'})
mdb.jobs['Global_Model']._Message(JOB_COMPLETED, {
    'time': 'Mon Apr 16 09:46:51 2018', 'jobName': 'Global_Model'})
# Save by fe1 on 2018_04_16-10.02.35; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_16-10.02.53; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_16-10.02.54; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_19-18.41.33; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='Submodel_AB_1mm', objectToCopy=mdb.models['Model-1'])
mdb.models['Submodel_AB_1mm'].setValues(globalJob='Global_Model.odb')
del mdb.models['Submodel_AB_1mm'].boundaryConditions['BC-1']
del mdb.models['Submodel_AB_1mm'].loads['Load-1']
del mdb.models['Submodel_AB_1mm'].loads['Load-2']
del mdb.models['Submodel_AB_1mm'].rootAssembly.features['assignment2-1']
mdb.models['Submodel_AB_1mm'].ConstrainedSketch(gridSpacing=7.81, name=
    '__profile__', sheetSize=312.4)
mdb.models['Submodel_AB_1mm'].parts['assignment2'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'])
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].rectangle(point1=(
    -25.3825, 13.6675), point2=(-95.6725, 76.1475))
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].rectangle(point1=(
    -25.3825, 13.6675), point2=(64.4325, -33.1925))
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].FilletByRadius(curve1=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[13], curve2=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[3], 
    nearPoint1=(-41.1732635498047, -5.07541465759277), nearPoint2=(
    -49.9594650268555, -2.51109600067139), radius=1.0)
#* A fillet cannot be created at a vertex shared by more than two entities.
# Save by fe1 on 2018_04_19-18.56.21; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Submodel_AB_1mm'].sketches['__profile__']
mdb.models['Submodel_AB_1mm'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].features['Shell planar-1'].sketch)
mdb.models['Submodel_AB_1mm'].parts['assignment2'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'], upToFeature=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].features['Shell planar-1'])
del mdb.models['Submodel_AB_1mm'].sketches['__edit__']
mdb.models['Submodel_AB_1mm'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].features['Partition face-1'].sketch)
mdb.models['Submodel_AB_1mm'].parts['assignment2'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'], upToFeature=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].features['Partition face-1'])
del mdb.models['Submodel_AB_1mm'].sketches['__edit__']
mdb.models['Submodel_AB_1mm'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].features['Shell planar-1'].sketch)
mdb.models['Submodel_AB_1mm'].parts['assignment2'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'], upToFeature=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].features['Shell planar-1'])
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'].geometry[5], curve2=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'].geometry[6], nearPoint1=
    (-42.0438423156738, -4.88774299621582), nearPoint2=(-50.1262550354004, 
    0.650463104248047), radius=1.0)
# Save by fe1 on 2018_04_19-18.58.31; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_1mm'].parts['assignment2'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Submodel_AB_1mm'].sketches['__edit__'])
del mdb.models['Submodel_AB_1mm'].sketches['__edit__']
mdb.models['Submodel_AB_1mm'].parts['assignment2'].regenerate()
mdb.models['Submodel_AB_1mm'].parts['assignment2'].deleteMesh(regions=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Submodel_AB_1mm'].ConstrainedSketch(gridSpacing=7.81, name=
    '__profile__', sheetSize=312.4, transform=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].MakeSketchTransform(
    sketchPlane=mdb.models['Submodel_AB_1mm'].parts['assignment2'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(-60.0, -15.0, 
    0.0)))
mdb.models['Submodel_AB_1mm'].parts['assignment2'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'])
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].delete(objectList=(
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[2], ))
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].delete(objectList=(
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[3], ))
del mdb.models['Submodel_AB_1mm'].sketches['__profile__']
del mdb.models['Submodel_AB_1mm'].parts['assignment2'].features['Partition face-1']
# Save by fe1 on 2018_04_19-19.01.06; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_19-19.02.26; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_1mm'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].features['Shell planar-1'].sketch)
mdb.models['Submodel_AB_1mm'].parts['assignment2'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'], upToFeature=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].features['Shell planar-1'])
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].rectangle(point1=(-30.0, 
    13.75), point2=(-86.25, 80.0))
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].rectangle(point1=(-30.0, 
    13.75), point2=(50.0, -25.0))
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].delete(objectList=(
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'].geometry[13], ))
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].delete(objectList=(
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'].geometry[16], ))
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].Line(point1=(50.0, 13.75), 
    point2=(-15.0, 13.75))
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'].geometry[17])
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'].geometry[15], entity2=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'].geometry[17])
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].Line(point1=(-15.0, 13.75), 
    point2=(-15.0, -30.0))
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'].geometry[18])
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'].geometry[17], entity2=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'].geometry[18])
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].Line(point1=(-15.0, -30.0), 
    point2=(51.25, -30.0))
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'].geometry[19])
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'].geometry[18], entity2=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'].geometry[19])
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].Line(point1=(51.25, -30.0), 
    point2=(50.0, 13.75))
# Save by fe1 on 2018_04_19-19.06.02; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Submodel_AB_1mm'].sketches['__edit__']
mdb.models['Submodel_AB_1mm'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].features['Shell planar-1'].sketch)
mdb.models['Submodel_AB_1mm'].parts['assignment2'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'], upToFeature=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].features['Shell planar-1'])
del mdb.models['Submodel_AB_1mm'].sketches['__edit__']
mdb.models['Submodel_AB_1mm'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].features['Shell planar-1'].sketch)
mdb.models['Submodel_AB_1mm'].parts['assignment2'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Submodel_AB_1mm'].sketches['__edit__'], upToFeature=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].features['Shell planar-1'])
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].rectangle(point1=(-91.25, 
    86.25), point2=(-33.75, 18.75))
mdb.models['Submodel_AB_1mm'].sketches['__edit__'].rectangle(point1=(-28.75, 
    13.75), point2=(57.5, -37.5))
# Save by fe1 on 2018_04_19-19.09.00; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_19-19.09.16; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Submodel_AB_1mm'].sketches['__edit__']
mdb.models['Submodel_AB_1mm'].ConstrainedSketch(gridSpacing=7.81, name=
    '__profile__', sheetSize=312.4)
mdb.models['Submodel_AB_1mm'].parts['assignment2'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'])
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].rectangle(point1=(
    -80.0525, 76.1475), point2=(-31.24, 15.62))
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].rectangle(point1=(-31.24, 
    7.81), point2=(54.67, -37.0975))
mdb.models['Submodel_AB_1mm'].parts['assignment2'].Cut(sketch=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'])
del mdb.models['Submodel_AB_1mm'].sketches['__profile__']
# Save by fe1 on 2018_04_19-19.11.07; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_19-19.11.21; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_19-19.11.52; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_1mm'].rootAssembly.Instance(dependent=ON, name=
    'assignment2-1', part=mdb.models['Submodel_AB_1mm'].parts['assignment2'])
mdb.models['Submodel_AB_1mm'].rootAssembly.Set(edges=
    mdb.models['Submodel_AB_1mm'].rootAssembly.instances['assignment2-1'].edges.getSequenceFromMask(
    ('[#10 ]', ), ), name='Set-4')
mdb.models['Submodel_AB_1mm'].SubmodelBC(absoluteExteriorTolerance=None, 
    createStepName='Step-1', dof=(1, 2), exteriorTolerance=0.05, 
    globalDrivingRegion='', globalIncrement=0, globalStep='1', name='BC-1', 
    region=mdb.models['Submodel_AB_1mm'].rootAssembly.sets['Set-4'], timeScale=
    OFF)
# Save by fe1 on 2018_04_19-19.15.14; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_19-19.15.15; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_1mm'].rootAssembly.Surface(name='Surf-1', side1Edges=
    mdb.models['Submodel_AB_1mm'].rootAssembly.instances['assignment2-1'].edges.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Submodel_AB_1mm'].SubmodelSB(absoluteExteriorTolerance=None, 
    createStepName='Step-1', exteriorTolerance=0.05, globalDrivingRegion='', 
    globalIncrement=0, globalStep='1', name='Load-1', region=
    mdb.models['Submodel_AB_1mm'].rootAssembly.surfaces['Surf-1'])
# Save by fe1 on 2018_04_19-19.17.43; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_1mm'].ConstrainedSketch(gridSpacing=7.81, name=
    '__profile__', sheetSize=312.4, transform=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].MakeSketchTransform(
    sketchPlane=mdb.models['Submodel_AB_1mm'].parts['assignment2'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(-53.876511, 
    -7.946679, 0.0)))
mdb.models['Submodel_AB_1mm'].parts['assignment2'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'])
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].Line(point1=(3.876511, 
    3.946679), point2=(-16.1234889999516, 3.946679))
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[9])
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[9])
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].vertices[8], entity2=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[7])
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].Line(point1=(4.876511, 
    2.946679), point2=(-16.1234889999516, 2.946679))
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[10])
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[10])
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].vertices[9], entity2=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[7])
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].Line(point1=(3.876511, 
    3.946679), point2=(3.876511, -17.0533209999779))
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[11])
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].TangentConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[11])
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].vertices[10], 
    entity2=mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[8])
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].Line(point1=(4.876511, 
    2.946679), point2=(5.34882392724609, -17.053321))
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'].vertices[11], 
    entity2=mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[8])
mdb.models['Submodel_AB_1mm'].sketches['__profile__'].ParallelConstraint(
    entity1=mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[12], 
    entity2=mdb.models['Submodel_AB_1mm'].sketches['__profile__'].geometry[2])
# Save by fe1 on 2018_04_19-19.23.53; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_1mm'].parts['assignment2'].PartitionFaceBySketch(faces=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), sketch=
    mdb.models['Submodel_AB_1mm'].sketches['__profile__'])
del mdb.models['Submodel_AB_1mm'].sketches['__profile__']
# Save by fe1 on 2018_04_19-19.24.13; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_1mm'].parts['assignment2'].deleteSeeds(regions=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#2008 ]', ), ))
mdb.models['Submodel_AB_1mm'].parts['assignment2'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#fe1f ]', ), ), number=10)
# Save by fe1 on 2018_04_19-19.26.31; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_1mm'].parts['assignment2'].generateMesh()
mdb.models['Submodel_AB_1mm'].parts['assignment2'].setElementType(elemTypes=(
    ElemType(elemCode=CPS8R, elemLibrary=STANDARD), ElemType(elemCode=CPS6M, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Submodel_AB_1mm'].parts['assignment2'].faces.getSequenceFromMask(
    ('[#3f ]', ), ), ))
# Save by fe1 on 2018_04_19-19.27.32; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_19-19.27.48; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_1mm'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Submodel_AB_1mm', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Submodel_AB_1-job', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Submodel_AB_1-job'].submit(consistencyChecking=OFF)
mdb.jobs['Submodel_AB_1-job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'localhost.localdomain', 'handle': 0, 
    'jobName': 'Submodel_AB_1-job'})
mdb.jobs['Submodel_AB_1-job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Submodel_AB_1-job'})
mdb.jobs['Submodel_AB_1-job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/home/fe1/Desktop/FiniteElementsAnalysis/assignment2/Submodel_AB_1-job.odb', 
    'jobName': 'Submodel_AB_1-job'})
mdb.jobs['Submodel_AB_1-job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Submodel_AB_1-job'})
mdb.jobs['Submodel_AB_1-job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'localhost.localdomain', 'handle': 0, 
    'jobName': 'Submodel_AB_1-job'})
mdb.jobs['Submodel_AB_1-job']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Submodel_AB_1-job'})
mdb.jobs['Submodel_AB_1-job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Submodel_AB_1-job'})
mdb.jobs['Submodel_AB_1-job']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Submodel_AB_1-job', 'memory': 26.0})
mdb.jobs['Submodel_AB_1-job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Submodel_AB_1-job'})
mdb.jobs['Submodel_AB_1-job']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Submodel_AB_1-job', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Submodel_AB_1-job']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Submodel_AB_1-job'})
mdb.jobs['Submodel_AB_1-job']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Submodel_AB_1-job'})
mdb.jobs['Submodel_AB_1-job']._Message(JOB_COMPLETED, {
    'time': 'Thu Apr 19 19:28:57 2018', 'jobName': 'Submodel_AB_1-job'})
mdb.Model(name='Submodel_AB_5mm', objectToCopy=mdb.models['Submodel_AB_1mm'])
del mdb.models['Submodel_AB_5mm'].parts['assignment2'].features['Partition face-1']
# Save by fe1 on 2018_04_19-19.44.01; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_5mm'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Submodel_AB_5mm'].parts['assignment2'].features['Shell planar-1'].sketch)
mdb.models['Submodel_AB_5mm'].parts['assignment2'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Submodel_AB_5mm'].sketches['__edit__'], upToFeature=
    mdb.models['Submodel_AB_5mm'].parts['assignment2'].features['Shell planar-1'])
mdb.models['Submodel_AB_5mm'].sketches['__edit__'].delete(objectList=(
    mdb.models['Submodel_AB_5mm'].sketches['__edit__'].geometry[8], ))
# Save by fe1 on 2018_04_19-19.44.46; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_5mm'].sketches['__edit__'].FilletByRadius(curve1=
    mdb.models['Submodel_AB_5mm'].sketches['__edit__'].geometry[5], curve2=
    mdb.models['Submodel_AB_5mm'].sketches['__edit__'].geometry[6], nearPoint1=
    (-48.8837814331055, -4.97407484054565), nearPoint2=(-49.9933891296387, 
    -3.31308555603027), radius=5.0)
# Save by fe1 on 2018_04_19-19.45.18; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_5mm'].parts['assignment2'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Submodel_AB_5mm'].sketches['__edit__'])
del mdb.models['Submodel_AB_5mm'].sketches['__edit__']
# Save by fe1 on 2018_04_19-19.45.41; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_5mm'].parts['assignment2'].regenerate()
# Save by fe1 on 2018_04_19-19.46.04; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_5mm'].ConstrainedSketch(gridSpacing=7.81, name=
    '__profile__', sheetSize=312.4, transform=
    mdb.models['Submodel_AB_5mm'].parts['assignment2'].MakeSketchTransform(
    sketchPlane=mdb.models['Submodel_AB_5mm'].parts['assignment2'].faces[0], 
    sketchPlaneSide=SIDE1, sketchOrientation=RIGHT, origin=(-53.854792, 
    -7.928974, 0.0)))
mdb.models['Submodel_AB_5mm'].parts['assignment2'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Submodel_AB_5mm'].sketches['__profile__'])
mdb.models['Submodel_AB_5mm'].sketches['__profile__'].Line(point1=(3.854792, 
    7.928974), point2=(-16.1452079999863, 7.928974))
mdb.models['Submodel_AB_5mm'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Submodel_AB_5mm'].sketches['__profile__'].geometry[9])
mdb.models['Submodel_AB_5mm'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_5mm'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Submodel_AB_5mm'].sketches['__profile__'].geometry[9])
mdb.models['Submodel_AB_5mm'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_5mm'].sketches['__profile__'].vertices[8], entity2=
    mdb.models['Submodel_AB_5mm'].sketches['__profile__'].geometry[7])
mdb.models['Submodel_AB_5mm'].sketches['__profile__'].Line(point1=(7.81, 
    -17.071026), point2=(8.854792, 2.928974))
mdb.models['Submodel_AB_5mm'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_5mm'].sketches['__profile__'].vertices[9], entity2=
    mdb.models['Submodel_AB_5mm'].sketches['__profile__'].geometry[8])
mdb.models['Submodel_AB_5mm'].sketches['__profile__'].Line(point1=(8.854792, 
    2.928974), point2=(-16.1452079999863, 2.928974))
mdb.models['Submodel_AB_5mm'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Submodel_AB_5mm'].sketches['__profile__'].geometry[11])
mdb.models['Submodel_AB_5mm'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_5mm'].sketches['__profile__'].vertices[10], 
    entity2=mdb.models['Submodel_AB_5mm'].sketches['__profile__'].geometry[7])
mdb.models['Submodel_AB_5mm'].sketches['__profile__'].Line(point1=(3.854792, 
    7.928974), point2=(4.67425382250977, -17.071026))
mdb.models['Submodel_AB_5mm'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Submodel_AB_5mm'].sketches['__profile__'].vertices[11], 
    entity2=mdb.models['Submodel_AB_5mm'].sketches['__profile__'].geometry[8])
mdb.models['Submodel_AB_5mm'].sketches['__profile__'].PerpendicularConstraint(
    entity1=mdb.models['Submodel_AB_5mm'].sketches['__profile__'].geometry[11], 
    entity2=mdb.models['Submodel_AB_5mm'].sketches['__profile__'].geometry[10])
mdb.models['Submodel_AB_5mm'].sketches['__profile__'].PerpendicularConstraint(
    entity1=mdb.models['Submodel_AB_5mm'].sketches['__profile__'].geometry[9], 
    entity2=mdb.models['Submodel_AB_5mm'].sketches['__profile__'].geometry[12])
# Save by fe1 on 2018_04_19-19.48.44; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_19-19.48.49; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_5mm'].parts['assignment2'].PartitionFaceBySketch(faces=
    mdb.models['Submodel_AB_5mm'].parts['assignment2'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), sketch=
    mdb.models['Submodel_AB_5mm'].sketches['__profile__'])
del mdb.models['Submodel_AB_5mm'].sketches['__profile__']
mdb.models['Submodel_AB_5mm'].parts['assignment2'].generateMesh()
mdb.models['Submodel_AB_5mm'].parts['assignment2'].deleteMesh(regions=
    mdb.models['Submodel_AB_5mm'].parts['assignment2'].faces.getSequenceFromMask(
    ('[#11 ]', ), ))
mdb.models['Submodel_AB_5mm'].parts['assignment2'].deleteSeeds(regions=
    mdb.models['Submodel_AB_5mm'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#6008 ]', ), ))
mdb.models['Submodel_AB_5mm'].parts['assignment2'].deleteMesh(regions=
    mdb.models['Submodel_AB_5mm'].parts['assignment2'].faces.getSequenceFromMask(
    ('[#2e ]', ), ))
mdb.models['Submodel_AB_5mm'].parts['assignment2'].deleteSeeds(regions=
    mdb.models['Submodel_AB_5mm'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#1ffff ]', ), ))
mdb.models['Submodel_AB_5mm'].parts['assignment2'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Submodel_AB_5mm'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#de17 ]', ), ), number=10)
mdb.models['Submodel_AB_5mm'].parts['assignment2'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Submodel_AB_5mm'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#8 ]', ), ), number=10)
mdb.models['Submodel_AB_5mm'].parts['assignment2'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Submodel_AB_5mm'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#100e0 ]', ), ), number=2)
mdb.models['Submodel_AB_5mm'].parts['assignment2'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Submodel_AB_5mm'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#100e0 ]', ), ), number=3)
mdb.models['Submodel_AB_5mm'].parts['assignment2'].seedEdgeByNumber(constraint=
    FINER, edges=
    mdb.models['Submodel_AB_5mm'].parts['assignment2'].edges.getSequenceFromMask(
    ('[#2000 ]', ), ), number=10)
mdb.models['Submodel_AB_5mm'].parts['assignment2'].generateMesh()
# Save by fe1 on 2018_04_19-19.53.04; build 2016 2015_09_24-22.31.09 126547
# Save by fe1 on 2018_04_19-19.53.29; build 2016 2015_09_24-22.31.09 126547
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Submodel_AB_5mm'].parts['assignment2'].setElementType(elemTypes=(
    ElemType(elemCode=CPS8R, elemLibrary=STANDARD), ElemType(elemCode=CPS6M, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Submodel_AB_5mm'].parts['assignment2'].faces.getSequenceFromMask(
    ('[#3f ]', ), ), ))
mdb.models['Submodel_AB_5mm'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Submodel_AB_5mm', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Submodel_AB_5-job', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Submodel_AB_5-job'].submit(consistencyChecking=OFF)
mdb.jobs['Submodel_AB_5-job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'localhost.localdomain', 'handle': 0, 
    'jobName': 'Submodel_AB_5-job'})
mdb.jobs['Submodel_AB_5-job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR TWO-DIMENSIONAL MODELS, IF A NON-UNITY THICKNESS IS SPECIFIED FOR TWO-DIMENSIONAL SOLID ELEMENTS AND THESE ELEMENTS ARE INVOLVED IN AN INTERACTION SUCH AS CONTACT, THE SAME THICKNESS SHOULD BE SPECIFIED FOR THE OUT-OF-PLANE THICKNESS OF THE CORRESPONDING SURFACE UNDER *SURFACE INTERACTION.', 
    'jobName': 'Submodel_AB_5-job'})
mdb.jobs['Submodel_AB_5-job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Submodel_AB_5-job'})
mdb.jobs['Submodel_AB_5-job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/home/fe1/Desktop/FiniteElementsAnalysis/assignment2/Submodel_AB_5-job.odb', 
    'jobName': 'Submodel_AB_5-job'})
mdb.jobs['Submodel_AB_5-job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Submodel_AB_5-job'})
mdb.jobs['Submodel_AB_5-job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'localhost.localdomain', 'handle': 0, 
    'jobName': 'Submodel_AB_5-job'})
mdb.jobs['Submodel_AB_5-job']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Submodel_AB_5-job'})
mdb.jobs['Submodel_AB_5-job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Submodel_AB_5-job'})
mdb.jobs['Submodel_AB_5-job']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Submodel_AB_5-job', 'memory': 26.0})
mdb.jobs['Submodel_AB_5-job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Submodel_AB_5-job'})
mdb.jobs['Submodel_AB_5-job']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Submodel_AB_5-job', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Submodel_AB_5-job']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Submodel_AB_5-job'})
mdb.jobs['Submodel_AB_5-job']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Submodel_AB_5-job'})
mdb.jobs['Submodel_AB_5-job']._Message(JOB_COMPLETED, {
    'time': 'Thu Apr 19 19:54:52 2018', 'jobName': 'Submodel_AB_5-job'})
# Save by fe1 on 2018_04_19-20.08.14; build 2016 2015_09_24-22.31.09 126547
